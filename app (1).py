# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XfGHs8X8_QkAFbZSciIhZJePTFWpved2
"""

import streamlit as st
import pandas as pd
import random
import uuid
from datetime import datetime

def generate_unique_employee_id():
    return "E" + str(uuid.uuid4()).split('-')[0]  # e.g. E4a59bf4e

def add_employee(employees_df, new_employee):
    if 'EmployeeID' in new_employee and new_employee['EmployeeID']:
        raise ValueError("New employee must not have an EmployeeID; it will be autogenerated.")
    new_employee['EmployeeID'] = generate_unique_employee_id()
    employees_df = pd.concat([employees_df, pd.DataFrame([new_employee])], ignore_index=True)
    st.success(f"Added new employee with ID {new_employee['EmployeeID']}")
    employees_df.to_csv('Employee_with_ID_with_random_skills.csv', index=False)
    return employees_df

def update_employee(employees_df, employee_id, updated_fields):
    if employee_id not in employees_df['EmployeeID'].values:
        st.error(f"EmployeeID {employee_id} not found. Cannot update non-existent employee.")
        return employees_df
    for key, value in updated_fields.items():
        employees_df.loc[employees_df['EmployeeID'] == employee_id, key] = value
    st.success(f"Updated employee {employee_id} with fields {updated_fields}")
    employees_df.to_csv('Employee_with_ID_with_random_skills.csv', index=False)
    return employees_df

def delete_employee(employees_df, employee_id):
    if employee_id not in employees_df['EmployeeID'].values:
        st.error(f"EmployeeID {employee_id} not found. Cannot delete non-existent employee.")
        return employees_df
    employees_df = employees_df.drop(employees_df[employees_df['EmployeeID'] == employee_id].index)
    st.success(f"Deleted employee with ID {employee_id}")
    employees_df.to_csv('/content/Employee_with_ID_with_random_skills (1).csv', index=False)
    return employees_df

def add_project(projects_df, new_project):
    projects_df = pd.concat([projects_df, pd.DataFrame([new_project])], ignore_index=True)
    st.success(f"Added new project '{new_project['Project Name']}' with sub task '{new_project['Sub Task']}'")
    projects_df.to_csv('project_tasks_500.csv', index=False)
    return projects_df

# Load data
@st.cache_data
def load_employees():
    return pd.read_csv('/content/Employee_with_ID_with_random_skills (1).csv')

@st.cache_data
def load_projects():
    df = pd.read_csv('project_tasks_500.csv')
    df['Deadline'] = pd.to_datetime(df['Deadline'], errors='coerce')
    return df

employees = load_employees()
projects = load_projects()

st.title("Employee and Project Management Dashboard")

# Section: Add new employee
if st.sidebar.checkbox("Add New Employee"):
    with st.form("add_employee_form"):
        education = st.text_input("Education")
        joining_year = st.number_input("Joining Year", 1950, datetime.now().year)
        city = st.text_input("City")
        payment_tier = st.number_input("Payment Tier", 1)
        age = st.number_input("Age", 18)
        gender = st.selectbox("Gender", ["Male", "Female", "Other"])
        ever_benched = st.selectbox("Ever Benched", ["Yes", "No"])
        experience = st.number_input("Experience in Current Domain (years)", 0)
        leave_or_not = st.selectbox("Leave or Not", [0, 1])
        skills = st.text_input("Skills (comma separated)")
        submit = st.form_submit_button("Add Employee")
        if submit:
            new_employee = {
                'Education': education,
                'JoiningYear': joining_year,
                'City': city,
                'PaymentTier': payment_tier,
                'Age': age,
                'Gender': gender,
                'EverBenched': ever_benched,
                'ExperienceInCurrentDomain': experience,
                'LeaveOrNot': leave_or_not,
                'skills': skills
            }
            employees = add_employee(employees, new_employee)

# Section: Update an employee
if st.sidebar.checkbox("Update Employee"):
    employee_id_update = st.text_input("EmployeeID to Update")
    if employee_id_update:
        if employee_id_update in employees['EmployeeID'].values:
            with st.form("update_employee_form"):
                city_upd = st.text_input("Updated City")
                payment_tier_upd = st.number_input("Updated Payment Tier", 1)
                skills_upd = st.text_input("Updated skills (comma separated)")
                submit_upd = st.form_submit_button("Update Employee")
                if submit_upd:
                    updated_fields = {
                        'City': city_upd,
                        'PaymentTier': payment_tier_upd,
                        'skills': skills_upd
                    }
                    employees = update_employee(employees, employee_id_update, updated_fields)
        else:
            st.error("EmployeeID not found.")

# Section: Delete an employee
if st.sidebar.checkbox("Delete Employee"):
    employee_id_delete = st.text_input("EmployeeID to Delete")
    if st.button("Delete Employee"):
        if employee_id_delete:
            employees = delete_employee(employees, employee_id_delete)
        else:
            st.warning("Please enter EmployeeID to delete.")

# Section: Add new project
if st.sidebar.checkbox("Add New Project"):
    with st.form("add_project_form"):
        project_name = st.text_input("Project Name")
        deadline = st.date_input("Deadline")
        sub_task = st.text_input("Sub Task")
        skills_required = st.text_input("Skills Required (comma separated)")
        submit_proj = st.form_submit_button("Add Project")
        if submit_proj:
            new_project = {
                'Project Name': project_name,
                'Deadline': deadline.strftime("%Y-%m-%d"),
                'Sub Task': sub_task,
                'Skills Required': skills_required
            }
            projects = add_project(projects, new_project)

# Assign projects sorted by earliest deadline
projects_sorted = projects.sort_values(by='Deadline').reset_index(drop=True)
assignments = []
employee_project_map = {}

for i, task in projects_sorted.iterrows():
    available_employees = employees['EmployeeID'].tolist()
    available_employees = [
        e for e in available_employees
        if task['Project Name'] not in employee_project_map.get(e, set())
    ]
    if not available_employees:
        assigned_employee = None
    else:
        assigned_employee = random.choice(available_employees)
        employee_project_map.setdefault(assigned_employee, set()).add(task['Project Name'])
    assignments.append({
        'Project Name': task['Project Name'],
        'Deadline': task['Deadline'],
        'Sub Task': task['Sub Task'],
        'Skills Required': task['Skills Required'],
        'Assigned EmployeeID': assigned_employee
    })

df_assignments = pd.DataFrame(assignments)
df_assignments.to_csv('project_task_assignments.csv', index=False)
st.success("âœ… Assignments saved to project_task_assignments.csv")
st.dataframe(df_assignments)