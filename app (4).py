import streamlit as st
import pandas as pd
import random
import uuid
from datetime import datetime


# ---------- Utility Functions ----------


def generate_unique_employee_id():
    return "E" + str(uuid.uuid4()).split('-')[0]  # e.g. E4a59bf4e


def add_employee(employees_df, new_employee, employee_file):
    if 'EmployeeID' in new_employee and new_employee['EmployeeID']:
        raise ValueError("New employee must not have an EmployeeID; it will be autogenerated.")
    new_employee['EmployeeID'] = generate_unique_employee_id()
    employees_df = pd.concat([employees_df, pd.DataFrame([new_employee])], ignore_index=True)
    st.success(f"Added new employee with ID {new_employee['EmployeeID']}")
    employees_df.to_csv(employee_file, index=False)
    return employees_df


def update_employee(employees_df, employee_id, updated_fields, employee_file):
    if employee_id not in employees_df['EmployeeID'].values:
        st.error(f"EmployeeID {employee_id} not found. Cannot update non-existent employee.")
        return employees_df
    for key, value in updated_fields.items():
        employees_df.loc[employees_df['EmployeeID'] == employee_id, key] = value
    st.success(f"Updated employee {employee_id} with fields {updated_fields}")
    employees_df.to_csv(employee_file, index=False)
    return employees_df


def delete_employee(employees_df, employee_id, employee_file):
    if employee_id not in employees_df['EmployeeID'].values:
        st.error(f"EmployeeID {employee_id} not found. Cannot delete non-existent employee.")
        return employees_df
    employees_df = employees_df.drop(employees_df[employees_df['EmployeeID'] == employee_id].index)
    st.success(f"Deleted employee with ID {employee_id}")
    employees_df.to_csv(employee_file, index=False)
    return employees_df


def add_project(projects_df, new_project, project_file):
    projects_df = pd.concat([projects_df, pd.DataFrame([new_project])], ignore_index=True)
    st.success(f"Added new project '{new_project['Project Name']}' with sub task '{new_project['Sub Task']}'")
    projects_df.to_csv(project_file, index=False)
    return projects_df


# ---------- Employee transfer functions ----------


def move_employee_to_assigned(employee_id, employees_df, employee_file, assigned_file="assigned_employees.csv"):
    """Move employee from employees_df to assigned_employees.csv"""
    if employee_id not in employees_df['EmployeeID'].values:
        return employees_df  # nothing to do

    try:
        assigned_df = pd.read_csv(assigned_file)
    except FileNotFoundError:
        assigned_df = pd.DataFrame(columns=employees_df.columns)

    emp_row = employees_df[employees_df['EmployeeID'] == employee_id]

    # Append to assigned.csv
    assigned_df = pd.concat([assigned_df, emp_row], ignore_index=True)
    assigned_df.to_csv(assigned_file, index=False)

    # Remove from employees.csv
    employees_df = employees_df.drop(emp_row.index)
    employees_df.to_csv(employee_file, index=False)

    return employees_df


def move_employee_back_to_employees(employee_id, employee_file="Employee_with_ID_with_random_skills.csv", assigned_file="assigned_employees.csv"):
    """Move employee back to employee file after task completion"""
    employees_df = pd.read_csv(employee_file)

    try:
        assigned_df = pd.read_csv(assigned_file)
    except FileNotFoundError:
        st.warning("No assigned employees file found.")
        return employees_df

    if employee_id not in assigned_df['EmployeeID'].values:
        st.warning(f"Employee {employee_id} not found in assigned list.")
        return employees_df

    emp_row = assigned_df[assigned_df['EmployeeID'] == employee_id]

    # Add back to employees.csv
    employees_df = pd.concat([employees_df, emp_row], ignore_index=True)
    employees_df.to_csv(employee_file, index=False)

    # Remove from assigned.csv
    assigned_df = assigned_df.drop(emp_row.index)
    assigned_df.to_csv(assigned_file, index=False)

    st.success(f"Employee {employee_id} moved back to employee list after completing task.")
    return employees_df


# ---------- File Uploads ----------
st.sidebar.header("ðŸ“‚ Upload CSV Files")
employee_file_upload = st.sidebar.file_uploader("Upload Employee CSV", type=["csv"])
project_file_upload = st.sidebar.file_uploader("Upload Project CSV", type=["csv"])


if not employee_file_upload or not project_file_upload:
    st.warning("Please upload both Employee and Project CSV files to proceed.")
    st.stop()


employee_file = "Employee_with_ID_with_random_skills.csv"
project_file = "project_tasks_500.csv"


with open(employee_file, "wb") as f:
    f.write(employee_file_upload.getbuffer())


with open(project_file, "wb") as f:
    f.write(project_file_upload.getbuffer())


# ---------- Load Data ----------
@st.cache_data
def load_employees(path):
    return pd.read_csv(path)


@st.cache_data
def load_projects(path):
    df = pd.read_csv(path)
    df['Deadline'] = pd.to_datetime(df['Deadline'], errors='coerce')
    return df


employees = load_employees(employee_file)
projects = load_projects(project_file)


st.title("Employee and Project Management Dashboard")


# ---------- Add new employee ----------
if st.sidebar.checkbox("Add New Employee"):
    with st.form("add_employee_form"):
        education = st.text_input("Education")
        joining_year = st.number_input("Joining Year", 1950, datetime.now().year)
        city = st.text_input("City")
        payment_tier = st.number_input("Payment Tier", 1)
        age = st.number_input("Age", 18)
        gender = st.selectbox("Gender", ["Male", "Female", "Other"])
        ever_benched = st.selectbox("Ever Benched", ["Yes", "No"])
        experience = st.number_input("Experience in Current Domain (years)", 0)
        leave_or_not = st.selectbox("Leave or Not", [0, 1])
        skills = st.text_input("Skills (comma separated)")
        submit = st.form_submit_button("Add Employee")
        if submit:
            new_employee = {
                'Education': education,
                'JoiningYear': joining_year,
                'City': city,
                'PaymentTier': payment_tier,
                'Age': age,
                'Gender': gender,
                'EverBenched': ever_benched,
                'ExperienceInCurrentDomain': experience,
                'LeaveOrNot': leave_or_not,
                'skills': skills
            }
            employees = add_employee(employees, new_employee, employee_file)


# ---------- Update employee ----------
if st.sidebar.checkbox("Update Employee"):
    employee_id_update = st.text_input("EmployeeID to Update")
    if employee_id_update:
        if employee_id_update in employees['EmployeeID'].values:
            with st.form("update_employee_form"):
                city_upd = st.text_input("Updated City")
                payment_tier_upd = st.number_input("Updated Payment Tier", 1)
                skills_upd = st.text_input("Updated skills (comma separated)")
                submit_upd = st.form_submit_button("Update Employee")
                if submit_upd:
                    updated_fields = {
                        'City': city_upd,
                        'PaymentTier': payment_tier_upd,
                        'skills': skills_upd
                    }
                    employees = update_employee(employees, employee_id_update, updated_fields, employee_file)
        else:
            st.error("EmployeeID not found.")


# ---------- Delete employee ----------
if st.sidebar.checkbox("Delete Employee"):
    employee_id_delete = st.text_input("EmployeeID to Delete")
    if st.button("Delete Employee"):
        if employee_id_delete:
            employees = delete_employee(employees, employee_id_delete, employee_file)
        else:
            st.warning("Please enter EmployeeID to delete.")


# ---------- Add project ----------
if st.sidebar.checkbox("Add New Project"):
    with st.form("add_project_form"):
        project_name = st.text_input("Project Name")
        deadline = st.date_input("Deadline")
        sub_task = st.text_input("Sub Task")
        skills_required = st.text_input("Skills Required (comma separated)")
        submit_proj = st.form_submit_button("Add Project")
        if submit_proj:
            new_project = {
                'Project Name': project_name,
                'Deadline': deadline.strftime("%Y-%m-%d"),
                'Sub Task': sub_task,
                'Skills Required': skills_required
            }
            projects = add_project(projects, new_project, project_file)


# ---------- Assign Projects ----------
projects_sorted = projects.sort_values(by='Deadline').reset_index(drop=True)
assignments = []
employee_project_map = {}

# Load assigned employees to exclude them
try:
    assigned_employees_df = pd.read_csv("assigned_employees.csv")
    assigned_ids = set(assigned_employees_df['EmployeeID'].values)
except FileNotFoundError:
    assigned_employees_df = pd.DataFrame(columns=employees.columns)
    assigned_ids = set()

for i, task in projects_sorted.iterrows():
    available_employees = [
        e for e in employees['EmployeeID'].tolist()
        if e not in assigned_ids and task['Project Name'] not in employee_project_map.get(e, set())
    ]
    if not available_employees:
        assigned_employee = None
    else:
        assigned_employee = random.choice(available_employees)
        employee_project_map.setdefault(assigned_employee, set()).add(task['Project Name'])
        employees = move_employee_to_assigned(assigned_employee, employees, employee_file)

    assignments.append({
        'Project Name': task['Project Name'],
        'Deadline': task['Deadline'],
        'Sub Task': task['Sub Task'],
        'Skills Required': task['Skills Required'],
        'Assigned EmployeeID': assigned_employee
    })

df_assignments = pd.DataFrame(assignments)
df_assignments.to_csv("project_task_assignments.csv", index=False)
st.success("âœ… Assignments saved to project_task_assignments.csv")
st.dataframe(df_assignments)

# Provide assigned employees dataframe and download option
try:
    assigned_employees_df = pd.read_csv("assigned_employees.csv")
except FileNotFoundError:
    assigned_employees_df = pd.DataFrame(columns=employees.columns)

st.subheader("Assigned Employees")
st.dataframe(assigned_employees_df)

csv_data = assigned_employees_df.to_csv(index=False).encode('utf-8')
st.download_button(label="Download Assigned Employees CSV", data=csv_data, file_name="assigned_employees.csv", mime='text/csv')


# ---------- Auto-move employees back if deadline passed ----------
today = pd.to_datetime(datetime.now().date())

# Reload assigned employees
try:
    assigned_employees_df = pd.read_csv("assigned_employees.csv")
except FileNotFoundError:
    assigned_employees_df = pd.DataFrame(columns=employees.columns)

# Reload assignments
assignments_df = pd.read_csv("project_task_assignments.csv")
assignments_df['Deadline'] = pd.to_datetime(assignments_df['Deadline'], errors='coerce')

# Check deadlines
for _, row in assignments_df.iterrows():
    if pd.notnull(row['Deadline']) and row['Deadline'] < today and pd.notnull(row['Assigned EmployeeID']):
        emp_id = row['Assigned EmployeeID']
        employees = move_employee_back_to_employees(emp_id, employee_file)


# ---------- Mark Task Completed ----------
if st.sidebar.checkbox("Mark Task Completed"):
    emp_complete = st.text_input("Enter EmployeeID who completed task")
    if st.button("Mark Completed"):
        employees = move_employee_back_to_employees(emp_complete, employee_file)
